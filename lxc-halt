#!/bin/bash
#
# Halts a running container
#
# Triggers a 'halt' in the machine, then waits for the init process to be the
# only one left, then runs lxc-stop. There is a configurable timeout length for
# if containers are taking too long to shutdown.
#
# Copyright (c) 2010 Nigel McNie
#

# Default command for halting the container
SHUTDOWN_CMD="ssh [container] halt"

# Default timeout for container shutdown
TIMEOUT=20


# No user configuration beyond this point


[ -f /etc/default/lxc ] && . /etc/default/lxc

if [ "$(id -u)" != "0" ]; then
    echo "This script should be run as 'root'"
    exit 1
fi

while getopts "n:c:t:" flag
do
    case $flag in
        n) CONTAINER="$OPTARG" ;;
        c) SHUTDOWN_CMD="$OPTARG" ;;
        t) TIMEOUT="$OPTARG" ;;
        *) echo "Unknown flag: $flag"; exit 1; ;;
    esac
done

if [ -z "$CONTAINER" ]; then
    echo "lxc-halt: missing container name, use -n option"
    exit 1
fi

if [ ! -d /var/lib/lxc/$CONTAINER ]; then
    echo "lxc-halt: container $CONTAINER does not exist"
    exit 1
fi

if [[ `lxc-info -n $CONTAINER | grep RUNNING` ]]; then

    cmd="${SHUTDOWN_CMD//\[container\]/$CONTAINER}"
    ( $cmd )

    starttime=$(date "+%s")
    while true
    do
        count=$(lxc-ps --lxc -n $CONTAINER ax | grep "^$CONTAINER " | wc -l)
        if [ $count -le 1 ]; then
            lxc-stop -n $CONTAINER
            exit 0
        fi
        sleep .25

        curtime=$(date "+%s")

        if [ $(( $curtime - $starttime )) -gt $TIMEOUT ]; then
            echo "Container $CONTAINER has been stopping for longer than $TIMEOUT seconds, forcing shutdown" >&2
            lxc-stop -n $CONTAINER
            exit 0
        fi
    done
else
    echo "Container $CONTAINER is already stopped" >&2
fi

